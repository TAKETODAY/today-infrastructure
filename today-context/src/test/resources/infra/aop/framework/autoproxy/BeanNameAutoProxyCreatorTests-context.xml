<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Original Author -> Harry Yang (taketoday@foxmail.com) https://taketoday.cn
  ~ Copyright Â© Harry Yang & 2017 - 2023 All Rights Reserved.
  ~
  ~ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see [http://www.gnu.org/licenses/]
  -->

<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "https://www.springframework.org/dtd/spring-beans-2.0.dtd">

<beans>

	<bean id="frozenProxyCreator" class="infra.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames" value="frozenBean" />
		<property name="frozen" value="true" />
		<property name="interceptorNames" value="nopInterceptor" />
	</bean>

	<bean id="_jdkBeanNameProxyCreator" class="infra.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<description>Automatically proxies using JDK dynamic proxies</description>
		<property name="beanNames" value="jdk*,onlyJdk,doubleJdk" />
		<property name="interceptorNames" value="nopInterceptor" />
	</bean>

	<bean id="doubleJdkBeanNameProxyCreator" class="infra.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames" value="doubleJdk" />
		<property name="interceptorNames" value="nopInterceptor" />
	</bean>

	<bean id="_cglibBeanNameProxyCreator" class="infra.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames" value="cglib*" />
		<property name="proxyTargetClass">
			<description>Use the inherited ProxyConfig property to force CGLIB proxying</description>
			<value>true</value>
		</property>
		<property name="interceptorNames">
			<description>Interceptors and Advisors to apply automatically</description>
			<list>
				<value>nopInterceptor</value>
				<value>countingBeforeAdvice</value>
			</list>
		</property>
	</bean>

	<bean id="introductionBeanNameProxyCreator" class="infra.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<description>
			Illustrates a JDK introduction
		</description>
		<property name="beanNames" value="*introductionUsingJdk" />
		<property name="interceptorNames">
			<list>
				<value>introductionNopInterceptor</value>
				<value>timestampIntroduction</value>
				<value>lockableAdvisor</value>
			</list>
		</property>
	</bean>

	<bean id="timestampIntroduction" class="infra.aop.testfixture.advice.TimestampIntroductionAdvisor"/>

	<!--
		Stateful mixin. Note that singleton property is false.
	-->
	<bean id="lockableAdvisor" class="test.mixin.LockMixinAdvisor"
			scope="prototype"/>

	<bean id="countingBeforeAdvice" class="infra.aop.testfixture.advice.CountingBeforeAdvice"/>

	<bean id="nopInterceptor" class="infra.aop.testfixture.interceptor.NopInterceptor"/>

	<bean id="introductionNopInterceptor" class="infra.aop.testfixture.interceptor.NopInterceptor"/>

	<bean id="introductionUsingJdk" class="infra.beans.testfixture.beans.TestBean">
		<property name="name" value="introductionUsingJdk" />
	</bean>

	<bean id="second-introductionUsingJdk" class="infra.beans.testfixture.beans.TestBean">
		<property name="name" value="second-introductionUsingJdk" />
	</bean>

	<!--
		Lazy only because it breaks other tests until this test is fixed
	-->
	<bean id="factory-introductionUsingJdk" class="infra.aop.framework.autoproxy.CreatesTestBean"
			lazy-init="true">
	</bean>

	<bean id="jdk1" class="infra.beans.testfixture.beans.TestBean">
		<property name="name" value="jdk1" />
	</bean>

	<bean id="frozen" class="infra.beans.testfixture.beans.TestBean">
		<property name="name" value="frozenBean"/>
	</bean>

	<alias name="frozen" alias="frozenBean"/>

	<bean id="cglib1" class="infra.beans.testfixture.beans.TestBean">
		<property name="name" value="cglib1" />
	</bean>

	<bean id="onlyJdk" class="infra.beans.testfixture.beans.TestBean">
		<property name="name" value="onlyJdk" />
	</bean>

	<bean id="doubleJdk" class="infra.beans.testfixture.beans.TestBean">
		<property name="name" value="doubleJdk" />
	</bean>

	<bean id="noproxy" class="infra.beans.testfixture.beans.TestBean">
		<property name="name" value="noproxy" />
	</bean>

	<bean id="lazy1" class="infra.beans.testfixture.beans.TestBean" lazy-init="true">
		<property name="name" value="lazy1" />
	</bean>
	
	<alias name="lazy1" alias="lazy1alias"/>

	<bean id="lazy2" class="infra.beans.testfixture.beans.TestBean" lazy-init="true">
		<property name="name" value="lazy2" />
	</bean>

	<bean id="lazyBeanNameAutoProxyCreator" class="infra.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames" value="lazy1" />
		<property name="customTargetSourceCreators">
			<bean class="infra.aop.framework.autoproxy.target.LazyInitTargetSourceCreator" />
		</property>
	</bean>

	<bean id="lazyAliasBeanNameAutoProxyCreator" class="infra.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames" value="lazy1alias" />
		<property name="customTargetSourceCreators">
			<bean class="infra.aop.framework.autoproxy.target.LazyInitTargetSourceCreator" />
		</property>
	</bean>

</beans>
