//apply plugin: "signing"
apply plugin: "maven-publish"
apply plugin: "org.jreleaser"

String repoUsername = properties["repoUsername"] ?: System.getenv("SNAPSHOTS_USERNAME")
String repoPassword = properties["repoPassword"] ?: System.getenv("SNAPSHOTS_TOKEN")

publishing.publications.withType(MavenPublication.class) {
  pom {
    afterEvaluate {
      name = project.name
      description = project.description
    }
    url = "https://github.com/TAKETODAY/today-infrastructure"
    organization {
      name = "TODAY Tech"
      url = "https://taketoday.cn"
    }
    licenses {
      license {
        name = "GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007"
        url = "https://www.gnu.org/licenses/gpl-3.0.txt"
        distribution = "repo"
      }
    }
    scm {
      url = "https://github.com/TAKETODAY/today-infrastructure.git"
      connection = "scm:git:git://github.com/TAKETODAY/today-infrastructure"
      developerConnection = "scm:git:git://github.com/TAKETODAY/today-infrastructure"
    }
    developers {
      developer {
        id = "taketoday"
        name = "Harry Yang"
        email = "i.take.today@gmail.com"
      }
    }
    issueManagement {
      system = "GitHub"
      url = "https://github.com/TAKETODAY/today-infrastructure/issues"
    }
  }
  versionMapping {
    usage('java-api') {
      fromResolutionResult()
    }
    usage('java-runtime') {
      fromResolutionResult()
    }
  }
}

// Disable Gradle module metadata publishing until we know what we want.
// https://docs.gradle.org/8.3/userguide/publishing_gradle_module_metadata.html#sub:disabling-gmm-publication
tasks.withType(GenerateModuleMetadata).configureEach {
  enabled = false
}

publishing {
  repositories {
    maven {
      url = layout.buildDirectory.dir('deployment-repository')
      name = "deployment"
    }
  }
}

//configureDeploymentRepository(project)
//
//static void configureDeploymentRepository(Project project) {
//  project.plugins.withType(MavenPublishPlugin.class).configureEach {
//    PublishingExtension publishing = project.getExtensions().getByType(PublishingExtension.class);
//    if (project.hasProperty("deploymentRepository")) {
//      publishing.repositories.maven {
//        it.url = project.property("deploymentRepository")
//        it.name = "deployment"
//      }
//    }
//  }
//}

jreleaser {
  signing {
    active = 'ALWAYS'
    armored = true
  }
  deploy {
    maven {

      mavenCentral {
        release {
          active = 'RELEASE'
          url = 'https://central.sonatype.com/api/v1/publisher'
          username = repoUsername
          password = repoPassword
          stagingRepository('build/deployment-repository')
        }
      }

      nexus2 {
        snapshot {
          active = 'SNAPSHOT'
          snapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
          applyMavenCentralRules = true
          snapshotSupported = true
          closeRepository = true
          releaseRepository = true
          username = repoUsername
          password = repoPassword
          stagingRepository('build/deployment-repository')
        }
      }

    }
  }
}
