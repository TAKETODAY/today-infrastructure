plugins {
  id 'java-library'
  id 'org.antora' version '1.0.0'
  id 'infra.generate-antora-yml'
}

description = "Infrastructure Docs"

apply from: "${rootDir}/gradle/publications.gradle"

antora {
  version = '3.2.0-alpha.4'
//  version = '3.1.7'
  playbook = 'antora-playbook.yml'
  options = ['--clean', '--stacktrace']
  dependencies = [
      '@antora/atlas-extension'                  : '1.0.0-alpha.1',
      '@antora/collector-extension'              : '1.0.0-alpha.3',
      '@asciidoctor/tabs'                        : '1.0.0-beta.3',
      '@opendevise/antora-release-line-extension': '1.0.0',
      '@today-tech/antora-extensions'            : '1.0.0'
  ]
}

jar {
  enabled = false
}

javadoc {
  enabled = false
}

generateAntoraYml {
  asciidocAttributes = project.provider({
    return ["infra-version": project.version]
  })
}

tasks.register("generateAntoraResources") {
  dependsOn 'generateAntoraYml'
}


/**
 * Produce Javadoc for all Infrastructure modules in "build/docs/javadoc"
 */
tasks.register('api', Javadoc) {
  group = "documentation"
  description = "Generates aggregated Javadoc API documentation."
  title = "${rootProject.description} ${version} API"

  dependsOn {
    moduleProjects.collect {
      it.tasks.getByName("jar")
    }
  }
  doFirst {
    classpath = files(
        // ensure the javadoc process can resolve types compiled from .aj sources
        project(":today-aspects").sourceSets.main.output
    )
    classpath += files(moduleProjects.collect { it.sourceSets.main.compileClasspath })
  }

  options {
    encoding = "UTF-8"
    memberLevel = JavadocMemberLevel.PROTECTED
    author = true
    header = rootProject.description
    use = true
    overview = "infra-docs/api/overview.html"
    splitIndex = true
    links(project.ext.javadocLinks)
    addBooleanOption('Xdoclint:syntax,reference', true) // only check syntax and reference with doclint
    addBooleanOption('Werror', true) // fail build on Javadoc warnings
  }
  source moduleProjects.collect { project ->
    project.sourceSets.main.allJava
  }
  maxMemory = "1024m"
  failOnError = false
  destinationDir = file("$buildDir/docs/javadoc")
}

/**
 * Zip all Java docs (javadoc & kdoc) into a single archive
 */
tasks.register('docsZip', Zip) {
  dependsOn('api')
  group = "distribution"
  description = "Builds -${archiveClassifier} archive containing api and reference " +
      "for deployment at https://taketoday.cn/open-source/projects/today-infrastructure/docs."

  archiveBaseName = "today-infrastructure"
  archiveClassifier = "docs"
  from("src/dist") {
    include "changelog.txt"
  }
  from(api) {
    into "javadoc-api"
  }
}

/**
 * Zip all Infrastructure schemas into a single archive
 */
tasks.register('schemaZip', Zip) {
  group = "distribution"
  archiveBaseName.set("today-infrastructure")
  archiveClassifier.set("schema")
  description = "Builds -${archiveClassifier} archive containing all " +
      "XSDs for deployment at"
  duplicatesStrategy DuplicatesStrategy.EXCLUDE
  moduleProjects.each { module ->
    def Properties schemas = new Properties();

    module.sourceSets.main.resources.find {
      (it.path.endsWith("META-INF/spring.schemas") || it.path.endsWith("META-INF\\spring.schemas"))
    }?.withInputStream { schemas.load(it) }

    for (def key : schemas.keySet()) {
      def shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, '$1')
      if (shortName != key) {
        File xsdFile = module.sourceSets.main.resources.find {
          (it.path.endsWith(schemas.get(key)) || it.path.endsWith(schemas.get(key).replaceAll('\\/', '\\\\')))
        }

        if (xsdFile != null) {
          into(shortName) {
            from xsdFile.path
          }
        }
      }
    }
  }
}

/**
 * Create a distribution zip with everything:
 * docs, schemas, jars, source jars, javadoc jars
 */
tasks.register('distZip', Zip) {
  dependsOn("docsZip", "schemaZip")
  group = "distribution"
  archiveBaseName.set("today-infrastructure")
  archiveClassifier.set("dist")
  description = "Builds -${archiveClassifier} archive, containing all jars and docs, " +
      "suitable for community download page."

  ext.baseDir = "today-infrastructure-${project.version}";

  from("src/docs/dist") {
    include "readme.txt"
    include "license.txt"
    include "notice.txt"
    into "${baseDir}"
    expand(copyright: new Date().format("yyyy"), version: project.version)
  }

  from(zipTree(docsZip.archiveFile)) {
    into "${baseDir}/docs"
  }

  from(zipTree(schemaZip.archiveFile)) {
    into "${baseDir}/schema"
  }

  moduleProjects.each { module ->
    into("${baseDir}/libs") {
      from module.jar
      if (module.tasks.findByPath("sourcesJar")) {
        from module.sourcesJar
      }
      if (module.tasks.findByPath("javadocJar")) {
        from module.javadocJar
      }
    }
  }
}

distZip.mustRunAfter moduleProjects.check

//publishing {
//  publications {
//    maven(MavenPublication) {
//      artifact docsZip
//      artifact schemaZip
//      artifact distZip
//    }
//  }
//}