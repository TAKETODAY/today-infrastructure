plugins {
  id 'java-library'
}

description = "Infrastructure Docs"

apply from: "${rootDir}/gradle/publications.gradle"

jar {
  enabled = false
}

javadoc {
  enabled = false
}

repositories {
  maven {
    url "https://repo.spring.io/release"
  }
}

dependencies {
  api(project(":today-context"))
  api(project(":today-web"))
  api("jakarta.servlet:jakarta.servlet-api")

  implementation(project(":today-core-test"))
  implementation("org.assertj:assertj-core")
}

/**
 * Produce Javadoc for all Infrastructure modules in "build/docs/javadoc"
 */
task api(type: Javadoc) {
  group = "Documentation"
  description = "Generates aggregated Javadoc API documentation."
  title = "${rootProject.description} ${version} API"

  dependsOn {
    moduleProjects.collect {
      it.tasks.getByName("jar")
    }
  }
  doFirst {
    classpath = files(
        // ensure the javadoc process can resolve types compiled from .aj sources
        project(":today-aspects").sourceSets.main.output
    )
    classpath += files(moduleProjects.collect { it.sourceSets.main.compileClasspath })
  }

  options {
    encoding = "UTF-8"
    memberLevel = JavadocMemberLevel.PROTECTED
    author = true
    header = rootProject.description
    use = true
    overview = "infra-docs/api/overview.html"
    splitIndex = true
    links(project.ext.javadocLinks)
    addBooleanOption('Xdoclint:syntax,reference', true) // only check syntax and reference with doclint
    addBooleanOption('Werror', true) // fail build on Javadoc warnings
  }
  source moduleProjects.collect { project ->
    project.sourceSets.main.allJava
  }
  maxMemory = "1024m"
  failOnError = false
  destinationDir = file("$buildDir/docs/javadoc")
}

/**
 * Zip all Java docs (javadoc & kdoc) into a single archive
 */
task docsZip(type: Zip, dependsOn: ['api']) {
  group = "Distribution"
  description = "Builds -${archiveClassifier} archive containing api and reference " +
      "for deployment at https://taketoday.cn/open-source/projects/today-infrastructure/docs."

  archiveBaseName = "today-infrastructure"
  archiveClassifier = "docs"
  from("src/dist") {
    include "changelog.txt"
  }
  from(api) {
    into "javadoc-api"
  }
}

/**
 * Zip all Infrastructure schemas into a single archive
 */
task schemaZip(type: Zip) {
  group = "Distribution"
  archiveBaseName.set("today-infrastructure")
  archiveClassifier.set("schema")
  description = "Builds -${archiveClassifier} archive containing all " +
      "XSDs for deployment at"
  duplicatesStrategy DuplicatesStrategy.EXCLUDE
  moduleProjects.each { module ->
    def Properties schemas = new Properties();

    module.sourceSets.main.resources.find {
      (it.path.endsWith("META-INF/spring.schemas") || it.path.endsWith("META-INF\\spring.schemas"))
    }?.withInputStream { schemas.load(it) }

    for (def key : schemas.keySet()) {
      def shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, '$1')
      if (shortName != key) {
        File xsdFile = module.sourceSets.main.resources.find {
          (it.path.endsWith(schemas.get(key)) || it.path.endsWith(schemas.get(key).replaceAll('\\/', '\\\\')))
        }

        if (xsdFile != null) {
          into(shortName) {
            from xsdFile.path
          }
        }
      }
    }
  }
}

/**
 * Create a distribution zip with everything:
 * docs, schemas, jars, source jars, javadoc jars
 */
task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
  group = "Distribution"
  archiveBaseName.set("today-infrastructure")
  archiveClassifier.set("dist")
  description = "Builds -${archiveClassifier} archive, containing all jars and docs, " +
      "suitable for community download page."

  ext.baseDir = "today-infrastructure-${project.version}";

  from("src/docs/dist") {
    include "readme.txt"
    include "license.txt"
    include "notice.txt"
    into "${baseDir}"
    expand(copyright: new Date().format("yyyy"), version: project.version)
  }

  from(zipTree(docsZip.archiveFile)) {
    into "${baseDir}/docs"
  }

  from(zipTree(schemaZip.archiveFile)) {
    into "${baseDir}/schema"
  }

  moduleProjects.each { module ->
    into("${baseDir}/libs") {
      from module.jar
      if (module.tasks.findByPath("sourcesJar")) {
        from module.sourcesJar
      }
      if (module.tasks.findByPath("javadocJar")) {
        from module.javadocJar
      }
    }
  }
}

distZip.mustRunAfter moduleProjects.check

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact docsZip
      artifact schemaZip
      artifact distZip
    }
  }
}