plugins {
  id 'com.gradleup.shadow' version "9.1.0" apply false
  id 'de.undercouch.download' version '5.4.0'
  id 'io.freefair.aspectj' version '8.13' apply false
  id 'me.champeau.mrjar' version '0.1.1'
  id 'me.champeau.jmh' version '0.7.2' apply false
  id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
}

ext {
  isSnapshot = version.endsWith('SNAPSHOT')
  isReleaseVersion = !isSnapshot
  starterProjects = subprojects.findAll { it.name.startsWith("today-starter") }
  moduleProjects = subprojects.findAll { it.name.startsWith("today-") && !it.name.startsWith("today-starter") } + [
      project(":infra-build:infra-annotation-config-processor"),
      project(":infra-build:infra-configuration-processor"),
      project(":infra-build:infra-app-loader"),
      project(":infra-build:infra-app-loader-tools"),
      project(":infra-build:infra-jarmode-layertools"),
      project(":infra-build:infra-gradle-plugin"),
      project(":infra-build:infra-maven-plugin")
  ]
  javaProjects = subprojects - starterProjects - [
      project(":infra-build:infra-code-coverage"),
      project(":infra-bom"), project(":infra-build"), project(":infra-dependencies"),
  ]
  testFixturesProjects = [
      project(":today-core"),
      project(":today-aop"),
      project(":today-beans"),
      project(":today-context"),
      project(":today-jcache"),
      project(":today-web"),
      project(":today-test"),
      project(":today-tx"),
      project(":today-core-aot")
  ] as Set
}

configure(allprojects) {
  group = "cn.taketoday"

  if (it.hasProperty("skipDocs")) {
    it.afterEvaluate {
      it.getTasks().matching(task -> {
        return JavaBasePlugin.DOCUMENTATION_GROUP == task.getGroup()
            || "distribution" == task.getGroup()
      }).forEach(task -> task.setEnabled(false))
    }
  }

  repositories {
//    maven { url "https://maven.aliyun.com/repository/public" }
//    maven { url "https://repo.huaweicloud.com/repository/maven" }
    mavenCentral()
    if (version.contains('-')) {
      maven { url = "https://repo.spring.io/milestone" }
    }
    if (version.endsWith('-SNAPSHOT')) {
      mavenLocal()
      maven { url = "https://repo.spring.io/snapshot" }
    }
  }
  configurations.configureEach {
    resolutionStrategy {
      cacheChangingModulesFor 0, "seconds"
      cacheDynamicVersionsFor 0, "seconds"
    }
  }
}

configure([rootProject] + javaProjects) {
  apply plugin: "java"
  apply plugin: 'infra.building.conventions'
  apply plugin: 'infra.building.optional-dependencies'
  apply from: "${rootDir}/gradle/toolchains.gradle"

  if (it.hasProperty("code-coverage")) {
    apply plugin: 'jacoco'
    jacocoTestReport {
      enabled = false
    }
  }

  if (testFixturesProjects.contains(it)) {
    apply plugin: "java-test-fixtures"
  }

  dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.junit.platform:junit-platform-suite-api")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.mockito:mockito-junit-jupiter")
    testImplementation("junit:junit")
    testImplementation("org.assertj:assertj-core")
    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor("org.projectlombok:lombok")

    // Pull in the latest JUnit 5 Launcher API to ensure proper support in IDEs.
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testRuntimeOnly("org.junit.platform:junit-platform-suite-engine")
    // 去除 测试警告
    testRuntimeOnly("com.google.code.findbugs:jsr305")
    testRuntimeOnly("com.google.code.findbugs:findbugs")
    testRuntimeOnly('org.jboss.logging:jboss-logging:3.5.3.Final')

    // JSR-305 only used for non-required meta-annotations
    compileOnly("com.google.code.findbugs:jsr305")
    compileOnly("com.google.code.findbugs:findbugs")
    compileOnly('org.jboss.logging:jboss-logging:3.5.3.Final')
  }

  ext.javadocLinks = [
      "https://docs.oracle.com/en/java/javase/17/docs/api/",
      "https://jakarta.ee/specifications/platform/9/apidocs/",
      "https://docs.jboss.org/hibernate/orm/5.6/javadocs/",
      "https://eclipse.dev/aspectj/doc/latest/runtime-api/",
      "https://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-core/2.15.2/",
      "https://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/2.15.2/",
      "https://www.javadoc.io/doc/com.fasterxml.jackson.dataformat/jackson-dataformat-xml/2.15.2/",
      "https://hc.apache.org/httpcomponents-client-5.5.x/current/httpclient5/apidocs/"

  ] as String[]
}

configure(starterProjects) {
  apply from: "${rootDir}/gradle/infra-starter.gradle"
}

configure(moduleProjects) {
  apply from: "${rootDir}/gradle/infra-module.gradle"
}

configure(rootProject) {
  description = "TODAY Infrastructure"
  apply plugin: 'infra.building.api-diff'
}


nexusPublishing {
  String repoUsername = project.properties["repoUsername"] ?: System.getenv("SNAPSHOTS_USERNAME")
  String repoPassword = project.properties["repoPassword"] ?: System.getenv("SNAPSHOTS_TOKEN")

  repositories {
    sonatype {
      username.set(repoUsername)
      password.set(repoPassword)
      nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
      snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
    }
  }
}
